<?php
/**
 * CRoute Component
 *
 * PHP version 5
 *
 * @category Route.Component
 * @package  Route
 * @version  1.5
 * @author   Damian Grant <codebogan@gmail.com>
 * @license  http://www.opensource.org/licenses/mit-license.php The MIT License
 * @link     http://www.croogo.org
 */
class CRouteComponent extends Component {

    public $controller = null;

    /**
     * Plugin name controller belongs to
     *
     * @var string
     */
    public $pluginName = 'Route';

    /**
     * Other components used by this component
     *
     * @var array
     * @access public
     */	
    public $components = array(
        'Croogo',
    );

    /**
     * Default filename to store custom routes in
     *
     * @var string
     */		
    public $customRoutesFilenameWithoutPath = 'routes.php';

    /**
     * Construct Controller
     *
     * @param Componentcollection $collection
     * @param array  $settings
     */
    public function __construct(ComponentCollection $collection, $settings = array()) {
        parent::__construct($collection, $settings);
    }

    /**
     * Initialize Controller - called before Controller::beforeFilter()
     *
     * @param object $controller
     */
    public function initialize(&$controller) {
        // saving the controller reference for later use
        $this->controller =& $controller;

        //pr($this->controller);
        //die();
        $this->Route = ClassRegistry::init('Route.Route');

        //custom node settings 
        if ($this->controller->name == 'Nodes') {
            $this->controller->Security->disabledFields = array('route_alias', 'route_status');
        }
    }

    /**
     * Determine path of customRoutesFile
     *
     * @return string
     */
    public function get_custom_routes_filepath() {
        $path = APP . 'Plugin' . DS . $this->pluginName . DS . 'Config' . DS . $this->customRoutesFilenameWithoutPath;
        return $path;
    }

    /**
     * Retrieve Routes from Database
     *
     * @return array
     */	
    public function get_custom_routes_from_db() {
        $params = array('conditions' => array('Route.status' => 1));
        $routes = $this->Route->find('all', $params);
        return $routes;
    }

    /**
     * Generate CroogoRouter::connect PHP code to save in the customRoutesFile (e.g. routes.php)
     *
     * @return string
     */	
    public function get_custom_routes_code() {
        $routes = $this->get_custom_routes_from_db();
        $newline = "\n";
        $code = "";
        $code .= "<?php" . $newline;
        $code .= "#DO NOT EDIT THIS FILE DIRECTLY!" . $newline;
        $code .= "#IT IS UPDATED BY THE ROUTE PLUGIN WHENEVER YOU ADD, DELETE, ENABLE OR DISABLE A ROUTE." . $newline;
        foreach($routes as $key=>$route) {
            $testing = eval('return '.$route['Route']['body'].';');
            if (is_array($testing)) {
                $code .= 'CroogoRouter::connect(\'/'.$route['Route']['alias'].'\', '.$route['Route']['body'].');' . $newline;
            }
        }
        return $code;
    }

    /**
     * Convert UNIX File Permissions Umask into human-readable string
     *
     * @param integer $perms
     * @return string
     */	
    public function _resolveperms($perms) {
        $oct = str_split( strrev( decoct( $perms ) ), 1 );
        //               0      1      2      3      4      5      6      7
        $masks = array( '---', '--x', '-w-', '-wx', 'r--', 'r-x', 'rw-', 'rwx' );
        return(
            sprintf( 
                '%s %s %s',
                array_key_exists( $oct[ 2 ], $masks ) ? $masks[ $oct[ 2 ] ] : '###',
                array_key_exists( $oct[ 1 ], $masks ) ? $masks[ $oct[ 1 ] ] : '###',
                array_key_exists( $oct[ 0 ], $masks ) ? $masks[ $oct[ 0 ] ] : '###'
            )
        );
    }

    /**
     * Write Custom Routes to the custom route file that is included_once by the croogo_router.php file	
     *
     * @param array $check
     * @return boolean
     */
    public function write_custom_routes_file() {
        $path = $this->get_custom_routes_filepath();
        $resultArray = array();
        $resultArray['output'] = '';
        $resultArray['code'] = '';			

        try {
            $permissions = @fileperms ( $path );
            $fileowner = @fileowner($path);
            $filegroup = @filegroup($path);
            $fileownerarray = posix_getpwuid($fileowner);
            $filegrouparray = posix_getgrgid($filegroup);
            $webserver_process_user_array = posix_getpwuid(posix_geteuid());
            $webserver_process_group_array = posix_getgrgid($filegroup);

            if (is_writable($path)) {
                $fp = @fopen($path, 'w');
                if ($fp !== false) {
                    $code = $this->get_custom_routes_code();
                    $resultArray['code'] = $code;
                    fwrite($fp, $code);
                    fclose($fp);
                    $resultArray['output'] .= __d('croogo', 'File has been written to: %s', $path) . '<br />';
                }
            } else {
                $resultArray['output'] .= '<h3 style="color: red;">' . __d('croogo', 'Cannot overwrite %s', basename($path)) . '</h3>'
                . '<strong style="color: red;">' . __d('croogo', 'Please ensure file is writable by the webserver process.') . '</strong>'
                . '<br /><br />'
                . '<strong>' . __d('croogo', 'File Location: %s', $path) . '</strong>'
                . '<br />';
                
                if ($permissions != 0) {
                    $resultArray['output'] .= '<strong>' . __d('croogo', 'File Permissions are: %s', substr(sprintf('%o', $permissions), -4)) . '</strong>';
                } else {
                    $resultArray['output'] .= '<strong>' . __d('croogo', 'File Permissions are:') . '</strong>' . ' ' . __d('croogo', 'Unknown (permissions issue?)');
                }
                
                $resultArray['output'] .= '<br />';
                
                if ($permissions == 0) {
                    $resultArray['output'] .= '<strong>' . __d('croogo', 'File Mask is:') . '</strong>' . ' ' . __d('croogo', 'Unknown (permissions issue?)');
                } else {
                    $resultArray['output'] .= '<strong>' . __d('croogo', 'File Mask is: %s', $this->_resolveperms($permissions)) . ' </strong>';
                }
                
                $resultArray['output'] .= '<br />';
                
                if ($fileowner === false) {
                    $resultArray['output'] .= '<strong>' . __d('croogo', 'Owned by User:') . '</strong>' . ' ' . __d('croogo', 'Unknown (permissions issue?)');
                } else {
                    $resultArray['output'] .= '<strong>' . __d('croogo', 'Owned by User: %s', $fileownerarray['name']) . '</strong>';
                }
                
                $resultArray['output'] .= '<br />'
                . '<strong>' . __d('croogo', 'Owned by Group:', $filegrouparray['name']) . ' </strong>'
                . '<br />'
                . '<strong>' . __d('croogo', 'Webserver running as User: %s', $webserver_process_user_array['name']) . '</strong>'
                . '<br />'
                . '<strong>' . __d('croogo', 'Webserver running in Group: %s', $webserver_process_group_array['name']) . '</strong>';					
            }
        } catch (Exception $e) {
            //do nothing
        }
        return $resultArray;
    }
}